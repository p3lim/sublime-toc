%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
# https://warcraft.wiki.gg/wiki/TOC_format
name: TOC
file_extensions:
  - toc
scope: source.toc

variables:
  # https://warcraft.wiki.gg/wiki/Localization
  locale: (?:deDE|enCN|enGB|enTW|enUS|esES|esMX|frFR|itIT|koKR|ptBR|ptPT|ruRU|zhCN|zhTW)
  # https://warcraft.wiki.gg/wiki/TOC_format#Client-specific_TOC_files
  # https://github.com/BigWigsMods/packager/blob/master/README.md#single-toc-file
  flavors: (?:Mainline|Classic|Vanilla|TBC|Wrath|Cata|Mists|Standard)
  # https://warcraft.wiki.gg/wiki/TOC_format#AllowLoadGameType
  load_types: (?:standard|mists|cata|wrath|tbc|vanilla|plunderstorm|mainline|classic)

contexts:
  main:
    # invalid (unfinished line)
    - match: '^##\s?$'
      scope: invalid.tag.known.toc

    # start of field boundary
    - match: '^#{2}\s'
      push:
        # scope boundary
        - meta_scope: keyword.tag.toc

        # interface version
        - match: (?i)\binterface\b
          push:
            # scope boundary
            - meta_scope: constant.language.tag.toc

            # end of field boundary
            - match: '$'
              pop: true

            # match flavor
            - match: \b-({{flavors}})\b
              scope: string.toc

            # match delimiter scope with boundary
            - match: :\s?
              scope: keyword.tag.toc

            # match values
            - match: (\d+)
              scope: constant.numeric.toc

            # avoid showing error on separators
            - match: \b,\s?\b

            # # highlight invalid types
            - match: \w+
              scope: invalid.tag.known.toc

        - match: (?i)\ballowloadgametype\b
          push:
            # scope boundary
            - meta_scope: constant.language.tag.toc

            # end of field boundary
            - match: '$'
              pop: true

            # match delimiter scope with boundary
            - match: :\s?
              scope: keyword.tag.toc

            # match types
            - match: \b{{load_types}}\b
              scope: string.toc

            # avoid showing error on separators
            - match: \b,\s?\b

            # # highlight invalid types
            - match: \w+
              scope: invalid.tag.known.toc

        # end of field boundary
        - match: (:|\Z)
          pop: true

        # informational with optional localization
        - match: (?i)\b(?:title|notes|category)(?:-({{locale}}))?\b
          scope: constant.language.tag.toc
          captures:
            1: string.toc

        # informational
        - match: (?i)\b(?:author|version|group|icontexture|iconatlas)\b
          scope: constant.language.tag.toc

        # addon compartment
        - match: (?i)\b(?:addoncompartmentfunc(onenter|onleave)?)\b
          scope: constant.language.tag.toc

        # loading conditions
        - match: (?i)\b(?:loadondemand|dependencies|optionaldeps|loadwith|loadmanagers|defaultstate)\b
          scope: constant.language.tag.toc

        # saved variables
        - match: (?i)\b(?:loadsavedvariablesfirst|savedvariables|savedvariablespercharacter)\b
          scope: constant.language.tag.toc

        # restricted (unusable by addons)
        - match: (?i)\b(?:allowload|loadfirst|onlybetaandptr|savedvariablesmachine|secure|usesecureenvironment)\b
          scope: constant.language.tag.toc

        # custom metadata
        - match: '\b[Xx]-([^:]+)\b'
          scope: constant.language.tag.toc
          captures:
            1: string.toc

        # highlight invalid tags as errors
        - match: '\b\S[^:]+\b'
          scope: invalid.tag.known.toc

    # comments (any line that starts with # not already matched)
    - match: '^#(?!#(?!#)).*$'
      scope: comment.source.toc

    # variables
    - match: '^(\[(?:Family|Game)\])'
      scope: constant.language.tag.toc

    - match: '\[AllowLoadGameType'
      push:
        # scope boundary
        - meta_scope: constant.language.tag.toc

        # end of field boundary
        - match: '\]$'
          pop: true

        # match types
        - match: \b{{load_types}}\b
          scope: string.toc

        # avoid showing error on separators
        - match: \b,\s?\b

        # highlight invalid types
        - match: \w+
          scope: invalid.tag.known.toc
